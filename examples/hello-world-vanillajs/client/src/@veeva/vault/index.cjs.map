{
  "version": 3,
  "sources": ["../../../core/sdk/index.mts", "../../../core/sdk/package.json"],
  "sourcesContent": ["import { PageParameters, PageContext, PagePlugin } from './page.mjs';\nimport { FakeParameters, FakePlugin } from './fake.mjs';\nimport { VaultApiClient } from './services.mjs';\nimport { SendEvent } from './event.mjs';\nimport { version } from './package.json';\n\nexport type {\n    VaultApiClient,\n    PageParameters,\n    PagePlugin,\n    FakePlugin,\n    FakeParameters,\n    PageContext,\n    SendEvent,\n};\n\n/**\n * Used to ensure we know of all the plugin types in our internal tooling\n * @internal\n */\nexport type AnyPlugin = PagePlugin | FakePlugin;\n\nexport interface VaultModule {\n    vaultApiClient: VaultApiClient;\n\n    /**\n     * definePage is the mechanism for registering Pageclientcode implementation. Vault Java SDK\n     * PageControllers can pass data.\n     *\n     *\n     * @param initialize - The callback function that is executed from a PageController's onLoad\n     * Response when first initialized.\n     *\n     * @returns A JsonObject which is returned from the response from the Vault Java SDK onEvent method\n     *\n     * @example Pagecliendcode implementation with Vanilla JS\n     * ```js\n     *\n     * export default Vault.definePage(({element, data, pageContext, sendEvent})=>{\n     *     element.textContent=\"Hello World\";\n     * });\n     * ```\n     *\n     * @example Pagecliendcode implementation with React\n     * ```js\n     *\n     * import { createRoot } from 'react-dom/client';\n     * import HelloWorld from './helloWorld';\n     *\n     *\n     * export default Vault.definePage(({element, data, pageContext, sendEvent})=>{\n     *     const root = createRoot(element);\n     *     root.render(<HelloWorld />);\n     * })\n     *\n     * ```\n     */\n    definePage<Data>(initialize: (params: PageParameters<Data>) => unknown): unknown;\n    /**\n     * This is only to ensure websdk works with more than one type of plugin.\n     * Please remove once we have a type other than \"page\"\n     * @internal\n     */\n    defineFake<Data>(initialize: (params: FakeParameters<Data>) => unknown): unknown;\n}\n\n/**\n * This is defined in SDK because it makes sense that the SDK defines the public interface, and\n * technically, the globals in the iframe are the public interface.\n *\n * If you think of customer code as being written in vanilla JS (no imports) then they'd essentially\n * be writing code like `window.__vaultWebSdkClient.definePage(...)`, so that part is the public API.\n *\n * @internal\n */\nexport type Runtime = {\n    __vaultMeta: {\n        version: string | null;\n    };\n    __vaultModuleV5: VaultModule;\n};\n\nconst win = window as typeof window & Runtime;\nwin.__vaultMeta.version = version;\nconst { definePage, vaultApiClient } = win.__vaultModuleV5;\nexport { definePage, vaultApiClient };\n", "{\n    \"name\": \"@veeva/vault\",\n    \"version\": \"1.0.2\",\n    \"description\": \"Vault Web SDK\",\n    \"main\": \"./index.mts\",\n    \"publishConfig\": {\n        \"access\": \"public\"\n    },\n    \"files\": [\n        \"**\",\n        \"!tsconfig.json\"\n    ]\n}\n"],
  "mappings": "yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,gBAAAE,EAAA,mBAAAC,IAAA,eAAAC,EAAAJ,GCEI,IAAAK,EAAW,QDgFf,IAAMC,EAAM,OACZA,EAAI,YAAY,QAAUC,EAC1B,GAAM,CAAE,WAAAC,EAAY,eAAAC,CAAe,EAAIH,EAAI",
  "names": ["sdk_exports", "__export", "definePage", "vaultApiClient", "__toCommonJS", "version", "win", "version", "definePage", "vaultApiClient"]
}
